//===----------------------------------------------------------------------===//
// Copyright Â© 2025 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
amends "@pkl.impl.ghactions/PklCI.pkl"

import "@gha/actions/Common.pkl"
import "@gha/actions/Setup.pkl"
import "@gha/Workflow.pkl"

local buildJob: Workflow.Job = new {
  `runs-on` = "ubuntu-latest"
  steps {
    new Common.Checkout { fetchDepth = 0 }
    new Setup.Java {
      javaVersion = "21"
      distribution = "temurin"
      cache = "gradle"
    }
    new {
      name = "Gradle build"
      run = "./gradlew build"
    }
  }
}

prb {
  jobs {
    ["build-and-test"] = buildJob
  }
}

// run same job as prb for commits on non-main branches
build = prb

main {
  jobs {
    ["release"] = (buildJob) {
      permissions {
        contents = "write"
      }
      steps {
        new {
          env {
            ["GH_TOKEN"] = "${{ github.token }}"
          }
          name = "Publish release on GitHub"
          // language=bash
          run = #"""
            if [[ -d build/releases && -n "$(ls -A build/releases)" ]]
            then
              REPO="${{ github.repo }}"
              for dir in build/releases/*
              do
                if [[ -d "$dir" ]]
                then
                  pkg=$(basename "$dir")
                  if gh release view "$pkg" ; then
                    echo "Package $pkg already published"
                  else
                    # TODO we can be kinder to GitHub by querying once for all releases.
                    echo -n "> Releasing $pkg at SHA1 ${{ github.sha }}..."
                    gh release create "$pkg" \
                      --title "$pkg" \
                      --target "${{ github.sha }}" \
                      --repo "$REPO" \
                      --notes "Release of $pkg" \
                      "$dir"/*
                    echo "DONE"
                  fi
                else
                  echo "> SKIPPING $dir; not a directory"
                fi
              done
            else
              echo "No new packages to release."
            fi
          """#
        }
      }
    }
  }
}

testReports {
  junit {
    "build/test-results/**/*.xml"
  }
}
