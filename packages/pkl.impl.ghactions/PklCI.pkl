//===----------------------------------------------------------------------===//
// Copyright Â© 2025 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
module pkl.impl.ghactions.PklCI

import "@gha/Workflow.pkl"
import "@gha/actions/Artifact.pkl"
import "@gha/Context.pkl"

import "actions/PublishUnitTestResult.pkl"

/// The workflow that runs during pull requests.
///
/// The following fields are overwritten and therefore don't need to be set:
///   * [Workflow.on]
///   * [Workflow.name]
///
/// This turns into a workflow called "Pull Request".
prb: Workflow

/// The workflow to run for commits that lands on the `main` branch only.
///
/// The following fields are overwritten and therefore don't need to be set:
///   * [Workflow.on]
///   * [Workflow.name]
///
/// This turns into a workflow called "Build".
main: Workflow

/// The workflow to run for commits that land on non-main branches.
///
/// The following fields are overwritten and therefore don't need to be set:
///   * [Workflow.on]
///   * [Workflow.name]
///
/// This turns into a workflow called "Build".
build: Workflow

/// The workflow that runs when tags are pushed.
///
/// The following fields are overwritten and therefore don't need to be set:
///   * [Workflow.on]
///   * [Workflow.name]
///
/// This turns into a workflow called "Release".
release: Workflow?

/// Test reports produced by [build] and [release].
///
/// Turns into steps that upload and processes test results.
testReports: TestReports

class TestReports {
  /// Paths, directories, and globs to junit test reports, to be processed by a GitHub Actions test reporter.
  junit: Listing<String>

  /// Paths, directories, and globs to HTML test reports, to be uploaded as an artifact.
  html: Listing<String>
}

local effectiveBuildWorkflow = (build) {
  name = "Build"
  on = new {
    push {
      `branches-ignore` {
        "main"
      }
      `tags-ignore` {
        "*"
      }
    }
  }
  jobs = super.jobs |> withPublishTestResults |> withUploadTestResultHtml
}

local effectiveMainWorkflow = (main) {
  name = "Build (main)"
  on = new {
    push {
      branches {
        "main"
      }
      `tags-ignore` {
        "*"
      }
    }
  }
  jobs = super.jobs |> withPublishTestResults |> withUploadTestResultHtml
}

/// Can't use [withPublishTestResults] because PRs submitted from forks can't create check runs.
/// Instead, testReportWorkflow gets triggered when this workflow is completed, and downloads the artifacts
/// published here.
local effectivePrbWorkflow = (prb) {
  name = "Pull Request"
  on = new {
    pull_request {}
  }
  jobs = super.jobs |> withUploadTestResultXml |> withUploadTestResultHtml
}

local effectiveReleaseWorkflow = (release) {
  name = "Release"
  on = new {
    push {
      tags {
        "*"
      }
      `branches-ignore` {
        "*"
      }
    }
  }
  jobs = super.jobs |> withPublishTestResults |> withUploadTestResultHtml
}

local testReportWorkflow: Workflow = new {
  name = "PR Test Reports"

  on {
    workflow_run {
      workflows {
        effectivePrbWorkflow.name
      }
      types {
        "completed"
      }
    }
  }

  jobs {
    ["test-results"] {
      name = "Test Results"
      `runs-on` = "ubuntu-latest"
      `if` = "github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'failure'"
      permissions {
        checks = "write"
        actions = "read"
      }
      steps {
        new {
          name = "Download artifacts"
          uses = "dawidd6/action-download-artifact@e7466d1a7587ed14867642c2ca74b5bcc1e19a2d"
          with {
            ["path"] = "artifacts"
            ["run_id"] = "${{ github.event.workflow_run.id }}"
          }
        }
        new PublishUnitTestResult {
          name = "Publish test results"
          with {
            commit = "${{ github.event.workflow_run.head_sha }}"
            event_name = "${{ github.event.workflow_run.event }}"
            event_file = "artifacts/Event File/event.json"
            file_patterns { "artifacts/**/*.xml" }
            comment_mode = "off"
          }
        }.step
      }
    }
  }
}

local const TEST_RESULT_HTML_ARTIFACT_NAME = "test-results-html"

local const TEST_RESULT_XML_ARTIFACT_NAME = "test-results-xml"

local withUploadTestResultXml: Mixin<Workflow.Jobs> = new {
  when (!testReports.junit.isEmpty) {
    [[true]] {
      steps {
        new Artifact.Upload {
          name = "Upload Test Result XML"
          path = testReports.junit.join("\n")
          `if` = "!cancelled()"
          artifactName = TEST_RESULT_XML_ARTIFACT_NAME
        }
        new Artifact.Upload {
          name = "Upload event file"
          artifactName = "Event File"
          `if` = "!cancelled()"
          path = Context.github.eventPath
        }
      }
    }
  }
}

local withUploadTestResultHtml: Mixin<Workflow.Jobs> = new {
  when (!testReports.html.isEmpty) {
    [[true]] {
      steps {
        new Artifact.Upload {
          name = "Upload Test Result HTML"
          path = testReports.html.join("\n")
          `if` = "!cancelled()"
          artifactName = TEST_RESULT_HTML_ARTIFACT_NAME
        }
      }
    }
  }
}

local withPublishTestResults: Mixin<Workflow.Jobs> = (it) ->
  let (hasMatrixBuild = it.any((_, job) -> job.strategy?.matrix != null))
    // if there are matrix builds, we need to publish test results as an xml artifact, then publish as a separate job.
    if (hasMatrixBuild)
      (it) {
        [[true]] {
          local self = this
          steps {
            // matrix build; upload test results as an artifact
            new Artifact.Upload {
              name = "Upload Test Result XML"
              path = testReports.junit.join("\n")
              `if` = "!cancelled()"
              artifactName = "\(TEST_RESULT_XML_ARTIFACT_NAME)-\(self.strategy.matrix.keys.join("-"))"
            }
          }
        }
        ["publish-test-results"] {
          needs {
            ...it.keys
          }
          `runs-on` = "ubuntu-latest"
          permissions {
            checks = "write"
          }
          steps {
            new PublishUnitTestResult {
              name = "Publish test results"
              `if` = "!cancelled()"
              with {
                file_patterns = testReports.junit
                comment_mode = "off"
              }
            }.step
          }
        }
      }
    else
      (it) {
        [[true]] {
          permissions {
            checks = "write"
          }
          steps {
            new PublishUnitTestResult {
              name = "Publish test results"
              `if` = "!cancelled()"
              with {
                file_patterns = testReports.junit
                comment_mode = "off"
              }
            }.step
          }
        }
      }

output {
  files {
    ["workflows/prb.yml"] = effectivePrbWorkflow.output
    ["workflows/build.yml"] = effectiveBuildWorkflow.output
    ["workflows/main.yml"] = effectiveMainWorkflow.output
    when (release != null) {
      ["workflows/release.yml"] = effectiveReleaseWorkflow.output
    }
    ["workflows/test_report.yml"] = testReportWorkflow.output
  }
}
