//===----------------------------------------------------------------------===//
// Copyright Â© 2025 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
/// Actions for managing "setup-programming language"" in GitHub workflows.
/// This module is a low-level module not indended for direct use.
/// Use the [Action](../Action) module instead to access these actions.
module temp.stefma.gha.actions.Setup

import "../Workflow.pkl"

/// Type-safe GitHub Action of the [setup-java](https://github.com/actions/setup-java) action.
class Java extends Workflow.Step {
  uses: "actions/setup-java@v4"

  /// The Java version that is going to be set up.
  ///
  /// Takes a whole or [semver](https://github.com/actions/setup-java?tab=readme-ov-file#supported-version-syntax)
  /// Java version.
  /// If not specified, the action will expect java-version-file input to be specified
  hidden javaVersion: String?

  /// The path to a file containing java version.
  ///
  /// If the `java-version-file` input is specified, the action will extract the version from the file and install it.
  ///
  /// Supported files are .java-version and .tool-versions.
  /// In .java-version file, only the version should be specified (e.g., 17.0.7).
  /// In .tool-versions file, java version should be preceded by the java keyword (e.g., java 17.0.7).
  /// The `.java-version` file recognizes all variants of the version description according to
  /// [jenv](https://github.com/jenv/jenv).
  /// Similarly, the `.tool-versions` file supports version specifications in accordance with
  /// [asdf](https://github.com/asdf-vm/asdf) standards, adhering to Semantic Versioning ([semver](https://semver.org/)).
  ///
  /// If both java-version and java-version-file inputs are provided, the java-version input will be used.
  ///
  /// Valid entry options:
  /// ```
  /// major versions: 8, 11, 16, 17, 21
  /// more specific versions: 8.0.282+8, 8.0.232, 11.0, 11.0.4, 17.0
  /// early access (EA) versions: 15-ea, 15.0.0-ea
  /// versions with specified distribution: openjdk64-11.0.2
  /// ```
  hidden javaVersionFile: String?

  /// Java [distribution](https://github.com/actions/setup-java?tab=readme-ov-file#supported-distributions)
  hidden distribution: JavaDistribution

  /// The packaging variant of the chosen distribution. Possible values: `jdk`, `jre`, `jdk+fx`, `jre+fx`.
  ///
  /// Default value: `jdk`
  hidden javaPackage: ("jdk" | "jre" | "jdk+fx" | "jre+fx")?

  /// The target architecture of the package.
  ///
  /// Possible values: `x86`, `x64`, `armv7`, `aarch64`, `ppc64le`.
  ///
  /// Default value: Derived from the runner machine.
  hidden architecture: ("x86"|"x64"|"armv7"|"aarch64"|"ppc64le")?

  /// If a use-case requires a custom distribution setup-java uses the compressed JDK from the location pointed by this
  /// input and will take care of the installation and caching on the VM.
  hidden jdkFile: String?

  /// Setting this option makes the action to check for the latest available version for the version spec.
  hidden checkLatest: Boolean?

  /// Quick [setup caching](#caching-packages-dependencies) for the dependencies managed through one of the predefined
  /// package managers.
  ///
  /// It can be one of "maven", "gradle" or "sbt"
  hidden cache: ("maven"|"gradle"|"sbt")?

  /// The path to a dependency file: pom.xml, build.gradle, build.sbt, etc.
  ///
  /// This option can be used with the [cache] option.
  /// If this option is omitted, the action searches for the dependency file in the entire repository.
  /// This option supports wildcards and a list of file names for caching multiple dependencies
  hidden cacheDependencyPath: String?

  // region Maven options
  // The action has a bunch of inputs to generate maven's [settings.xml](https://maven.apache.org/settings.html) on
  // the fly and pass the values to Apache Maven GPG Plugin as well as Apache Maven Toolchains.
  // See [advanced usage](docs/advanced-usage.md) for more.

  /// By default action overwrites the settings.xml.
  ///
  /// In order to skip generation of file if it exists, set this to `false`.
  hidden overwriteSettings: Boolean?

  /// ID of the distributionManagement repository in the pom.xml file.
  ///
  /// Default is `github`.
  hidden serverId: String?

  /// Environment variable name for the username for authentication to the Apache Maven repository.
  ///
  /// Default is GITHUB_ACTOR.
  hidden serverUsername: String?

  /// Environment variable name for password or token for authentication to the Apache Maven repository.
  ///
  /// Default is GITHUB_TOKEN.
  hidden serverPassword: String?

  /// Maven related setting to point to the directory where the settings.xml file will be written.
  ///
  /// Default is ~/.m2.
  hidden settingsPath: String?

  /// GPG private key to import.
  ///
  /// Default is empty string.
  hidden gpgPrivateKey: String?

  /// Environment variable name for the GPG private key passphrase.
  ///
  /// Default is GPG_PASSPHRASE.
  hidden gpgPassphrase: String?

  /// Name of Maven Toolchain ID if the default name of `${distribution}_${java-version}` is not wanted.
  hidden mvnToolchainId:String?

  /// Name of Maven Toolchain Vendor if the default name of `${distribution}` is not wanted
  hidden mvnToolchainVendor: String?
  // endregion

  local localWith = new Mapping {
    ["java-version"] = javaVersion
    ["java-version-file"] = javaVersionFile
    ["distribution"] = distribution
    ["java-package"] = javaPackage
    ["architecture"] = architecture
    ["jdkFile"] = jdkFile
    ["check-latest"] = checkLatest
    ["server-id"] = serverId
    ["server-username"] = serverUsername
    ["server-password"] = serverPassword
    ["settings-path"] = settingsPath
    ["overwrite-settings"] = overwriteSettings
    ["gpg-private-key"] = gpgPrivateKey
    ["gpg-passphrase"] = gpgPassphrase
    ["cache"] = cache
    ["cache-dependency-path"] = cacheDependencyPath
    ["mvn-toolchain-id"] = mvnToolchainId
    ["mvn-toolchain-vendor"] = mvnToolchainVendor
  }

  local filteredWith = localWith.toMap().filter((_, value) -> value != null)

  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

typealias JavaDistribution =
  "temurin"
  |"zulu"
  |"adopt"
  |"liberica"
  |"microsoft"
  |"corretto"
  |"semeru"
  |"oracle"
  |"dragonwell"
  |"sapmachine"
  |"graalvm"
  |"jetbrains"

setupJava: Java

/// Type-safe GitHub Action of the [setup-dotnet](https://github.com/actions/setup-dotnet) action.
class SetupDotnet extends Workflow.Step {
  uses: "actions/setup-dotnet@v4"

  hidden dotnetVersion: (String|Number|Boolean)?
  hidden dotnetQuality: (String|Number|Boolean)?
  hidden globalJsonFile: (String|Number|Boolean)?
  hidden sourceUrl: (String|Number|Boolean)?
  hidden owner: (String|Number|Boolean)?
  hidden configFile: (String|Number|Boolean)?
  hidden cache: (String|Number|Boolean)?
  hidden cacheDependencyPath: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["dotnet-version"] = dotnetVersion
    ["dotnet-quality"] = dotnetQuality
    ["global-json-file"] = globalJsonFile
    ["source-url"] = sourceUrl
    ["owner"] = owner
    ["config-file"] = configFile
    ["cache"] = cache
    ["cache-dependency-path"] = cacheDependencyPath
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}
setupDotnet: SetupDotnet = new {}

/// Type-safe GitHub Action of the [setup-go](https//github.com/actions/setup-go) action.
class Go extends Workflow.Step {
  uses: "actions/setup-go@v5"

  hidden goVersion: (String|Number|Boolean)?
  hidden goVersionFile: (String|Number|Boolean)?
  hidden checkLatest: (String|Number|Boolean)?
  hidden token: (String|Number|Boolean)?
  hidden cache: (String|Number|Boolean)?
  hidden cacheDependencyPath: (String|Number|Boolean)?
  hidden architecture: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["go-version"] = goVersion
    ["go-version-file"] = goVersionFile
    ["check-latest"] = checkLatest
    ["token"] = token
    ["cache"] = cache
    ["cache-dependency-path"] = cacheDependencyPath
    ["architecture"] = architecture
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

/// Type-safe GitHub Action of the [setup-node](
class Node extends Workflow.Step {
  uses: "actions/setup-node@v4"

  hidden alwaysAuth: (String|Number|Boolean)?
  hidden nodeVersion: (String|Number|Boolean)?
  hidden nodeVersionFile: (String|Number|Boolean)?
  hidden architecture: (String|Number|Boolean)?
  hidden checkLatest: (String|Number|Boolean)?
  hidden registryUrl: (String|Number|Boolean)?
  hidden scope: (String|Number|Boolean)?
  hidden token: (String|Number|Boolean)?
  hidden cache: (String|Number|Boolean)?
  hidden cacheDependencyPath: (String|Number|Boolean)?
  hidden mirror: (String|Number|Boolean)?
  hidden mirrorToken: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["always-auth"] = alwaysAuth
    ["node-version"] = nodeVersion
    ["node-version-file"] = nodeVersionFile
    ["architecture"] = architecture
    ["check-latest"] = checkLatest
    ["registry-url"] = registryUrl
    ["scope"] = scope
    ["token"] = token
    ["cache"] = cache
    ["cache-dependency-path"] = cacheDependencyPath
    ["mirror"] = mirror
    ["mirror-token"] = mirrorToken
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}

/// Type-safe GitHub Action of the [setup-python](https://github.com/actions/setup-python) action.
class Python extends Workflow.Step {
  uses: "actions/setup-python@v5"

  hidden pythonVersion: (String|Number|Boolean)?
  hidden pythonVersionFile: (String|Number|Boolean)?
  hidden cache: (String|Number|Boolean)?
  hidden architecture: (String|Number|Boolean)?
  hidden checkLatest: (String|Number|Boolean)?
  hidden token: (String|Number|Boolean)?
  hidden cacheDependencyPath: (String|Number|Boolean)?
  hidden updateEnvironment: (String|Number|Boolean)?
  hidden allowPrereleases: (String|Number|Boolean)?
  hidden freethreaded: (String|Number|Boolean)?

  local localWith = new Mapping {
    ["python-version"] = pythonVersion
    ["python-version-file"] = pythonVersionFile
    ["cache"] = cache
    ["architecture"] = architecture
    ["check-latest"] = checkLatest
    ["token"] = token
    ["cache-dependency-path"] = cacheDependencyPath
    ["update-environment"] = updateEnvironment
    ["allow-prereleases"] = allowPrereleases
    ["freethreaded"] = freethreaded
  }
  local filteredWith = localWith.toMap().filter((_, value) -> value != null)
  with = if (filteredWith.isEmpty) null else filteredWith.toMapping()
}
