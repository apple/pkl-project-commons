//===----------------------------------------------------------------------===//
// Copyright Â© 2025 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//===----------------------------------------------------------------------===//
/// A Pkl template for writing GitHub Action workflows.
///
/// This module provides a set of definitions for GitHub Action workflows,
/// including triggers, jobs, steps, and environment variables.
module temp.stefma.gha.Workflow

// region Trigger
abstract class Trigger {
  /// Define the type of activity that will trigger a workflow run.
  ///
  /// Most GitHub events are triggered by more than one type of activity.
  /// For example, the label is triggered when a label is created, edited, or deleted.
  /// The types keyword enables you to narrow down activity that causes the workflow to run.
  /// When only one activity type triggers a webhook event, the types keyword is unnecessary.
  ///
  /// You can use an array of event types.
  ///
  /// For more information about each event and their activity types, see
  /// [Events that trigger workflows](https://docs.github.com/en/actions/reference/workflows-and-actions/events-that-trigger-workflows#available-events).
  types: Listing<String>?
}

/// The base trigger, with no event types associated
class BaseTrigger extends Trigger {
  types: Listing<nothing>?
}

class BranchProtectionRule extends Trigger {
  types: Listing<BranchProtectionRuleType>?
}

typealias BranchProtectionRuleType =
  "created"
  |"edited"
  |"deleted"

class CheckRun extends Trigger {
  types: Listing<CheckRunType>?
}

typealias CheckRunType =
  "created"
  |"rerequested"
  |"completed"
  |"requested_action"

class CheckSuite extends Trigger {
  types: Listing<CheckSuiteType>?
}
typealias CheckSuiteType =
  "completed"
  |"requested"
  |"rerequested"

class Discussion extends Trigger {
  types: Listing<DiscussionType>?
}
typealias DiscussionType =
  "created"
  |"edited"
  |"deleted"
  |"transferred"
  |"pinned"
  |"unpinned"
  |"labeled"
  |"unlabeled"
  |"locked"
  |"unlocked"
  |"category_changed"
  |"answered"
  |"unanswered"

class DiscussionComment extends Trigger {
  types: Listing<DiscussionCommentType>?
}
typealias DiscussionCommentType =
  "created"
  |"edited"
  |"deleted"

class IssueComment extends Trigger {
  types: Listing<IssueCommentType>?
}
typealias IssueCommentType =
  "created"
  |"edited"
  |"deleted"

class Issues extends Trigger {
  types: Listing<IssuesType>?
}
typealias IssuesType =
  "opened"
  |"edited"
  |"deleted"
  |"transferred"
  |"pinned"
  |"unpinned"
  |"closed"
  |"reopened"
  |"assigned"
  |"unassigned"
  |"labeled"
  |"unlabeled"
  |"locked"
  |"unlocked"
  |"milestoned"
  |"demilestoned"

class Label extends Trigger {
  types: Listing<LabelType>?
}
typealias LabelType =
  "created"
  |"edited"
  |"deleted"

class MergeGroup extends Trigger {
  types: Listing<MergeGroupType>?
}
typealias MergeGroupType =
  "checked_requested"

class Milestone extends Trigger {
  types: Listing<MilestoneType>?
}
typealias MilestoneType =
  "created"
  |"closed"
  |"opened"
  |"edited"
  |"deleted"

class Project extends Trigger {
  types: Listing<ProjectType>?
}
typealias ProjectType =
  "created"
  |"updated"
  |"closed"
  |"reopened"
  |"edited"
  |"deleted"

class ProjectCard extends Trigger {
  types: Listing<ProjectCardType>?
}
typealias ProjectCardType =
  "created"
  |"moved"
  |"converted"
  |"edited"
  |"deleted"

class ProjectColumn extends Trigger {
  types: Listing<ProjectColumnType>?
}
typealias ProjectColumnType =
  "created"
  |"updated"
  |"moved"
  |"deleted"

class PullRequest extends Trigger {
  types: Listing<PullRequestType>?

  /// Use the branches filter when you want to include branch name patterns or when you want to both include and
  /// exclude branch names patterns.
  ///
  /// Accepts glob patterns that use characters like `*`, `**`, `+`, `?`, `!` and others to match more than one branch name.
  /// If a name contains any of these characters and you want a literal match, you need to escape each of these special
  /// characters with `\`.
  ///
  /// For more information about glob patterns, see the
  /// [Workflow syntax for GitHub Actions](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet).
  ///
  /// See <https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#onpull_requestpull_request_targetbranchesbranches-ignore>
  branches: Listing<String>?

  /// Use the branches-ignore filter when you only want to exclude branch name patterns.
  ///
  /// You cannot use both the branches and branches-ignore filters for the same event in a workflow.
  ///
  /// Accepts glob patterns that use characters like `*`, `**`, `+`, `?`, `!` and others to match more than one branch name.
  /// If a name contains any of these characters and you want a literal match, you need to escape each of these special
  /// characters with `\`.
  ///
  /// For more information about glob patterns, see the
  /// [Workflow syntax for GitHub Actions](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet).
  ///
  /// See <https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#onpull_requestpull_request_targetbranchesbranches-ignore>
  `branches-ignore`: Listing<String>(branches == null)?

  /// Use the paths filter when you want to include file path patterns or when you want to both include and exclude
  /// file path patterns.
  ///
  /// Accepts glob patterns that use the `*` and `**` wildcard characters to match more than one path name.
  /// For more information, see the
  /// [Workflow syntax for GitHub Actions](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet).
  paths: Listing<String>?

  /// Use the paths-ignore filter when you only want to exclude file path patterns.
  ///
  /// You cannot use both the paths and paths-ignore filters for the same event in a workflow.
  /// If you want to both include and exclude path patterns for a single event, use the paths filter prefixed with the
  /// `!` character to indicate which paths should be excluded.
  ///
  /// Accepts glob patterns that use the `*` and `**` wildcard characters to match more than one path name.
  /// For more information, see the
  /// [Workflow syntax for GitHub Actions](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet).
  `paths-ignore`: Listing<String>(paths == null)?
}

typealias PullRequestType =
  "assigned"
  |"unassigned"
  |"review_requested"
  |"review_request_removed"
  |"labeled"
  |"unlabeled"
  |"opened"
  |"edited"
  |"closed"
  |"reopened"
  |"synchronize"
  |"ready_for_review"
  |"locked"
  |"unlocked"
  |"ready_for_review"
  |"converted_to_draft"
  |"demilestoned"
  |"milestoned"
  |"review_requested"
  |"review_request_removed"
  |"auto_merge_enabled"
  |"auto_merge_disabled"

class PullRequestReview extends Trigger {
  types: Listing<PullRequestReviewType>?
}
typealias PullRequestReviewType =
  "submitted"
  |"edited"
  |"dismissed"

class PullRequestReviewComment extends Trigger {
  types: Listing<PullRequestReviewCommentType>?
}
typealias PullRequestReviewCommentType =
  "created"
  |"edited"
  |"deleted"

typealias PullRequestTargetType =
  "assigned"
  |"unassigned"
  |"labeled"
  |"unlabeled"
  |"opened"
  |"edited"
  |"closed"
  |"reopened"
  |"synchronize"
  |"converted_to_draft"
  |"ready_for_review"
  |"locked"
  |"unlocked"
  |"review_requested"
  |"review_request_removed"
  |"auto_merge_enabled"
  |"auto_merge_disabled"

class Push extends Trigger {
  /// Use the `branches` filter when you want to include branch name patterns or when you want to both include and
  /// exclude branch names patterns.
  ///
  /// Accepts glob patterns that use characters like `*`, `**`, `+`, `?`, `!` and others to match more than one branch
  /// or tag name.
  /// If a name contains any of these characters and you want a literal match, you need to escape each of these special
  /// characters with `\`.
  ///
  /// For more information about glob patterns, see the
  /// [Workflow syntax for GitHub Actions](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet).
  branches: Listing<String>?

  /// Use the `branches-ignore` filter when you only want to exclude branch name patterns.
  ///
  /// You cannot use both the [branches] and [`branches-ignore`] filters for the same event in a workflow.
  ///
  /// Accepts glob patterns that use characters like `*`, `**`, `+`, `?`, `!` and others to match more than one branch
  /// or tag name.
  /// If a name contains any of these characters and you want a literal match, you need to escape each of these special
  /// characters with `\`.
  ///
  /// For more information about glob patterns, see the
  /// [Workflow syntax for GitHub Actions](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet).
  `branches-ignore`: Listing<String>(branches == null)?

  /// Use the tags filter when you want to include tag name patterns or when you want to both include and exclude tag
  /// names patterns.
  ///
  /// Accepts glob patterns that use characters like `*`, `**`, `+`, `?`, `!` and others to match more than one branch
  /// or tag name.
  /// If a name contains any of these characters and you want a literal match, you need to escape each of these special
  /// characters with `\`.
  ///
  /// For more information about glob patterns, see the
  /// [Workflow syntax for GitHub Actions](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet).
  tags: Listing<String>?

  /// Use the tags-ignore filter when you only want to exclude tag name patterns.
  /// You cannot use both the [tags] and [tags-ignore] filters for the same event in a workflow.
  ///
  /// Accepts glob patterns that use characters like `*`, `**`, `+`, `?`, `!` and others to match more than one branch
  /// or tag name.
  /// If a name contains any of these characters and you want a literal match, you need to escape each of these special
  /// characters with `\`.
  ///
  /// For more information about glob patterns, see the
  /// [Workflow syntax for GitHub Actions](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet).
  `tags-ignore`: Listing<String>(tags == null)?

  /// Use the paths filter when you want to include file path patterns or when you want to both include and exclude file
  /// path patterns.
  ///
  /// Accepts glob patterns that use the `*` and `**` wildcard characters to match more than one path name.
  /// For more information, see the
  /// [Workflow syntax for GitHub Actions](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet).
  paths: Listing<String>?

  /// Use the paths-ignore filter when you only want to exclude file path patterns.
  ///
  /// You cannot use both the paths and paths-ignore filters for the same event in a workflow.
  /// If you want to both include and exclude path patterns for a single event, use the paths filter prefixed with the
  /// `!` character to indicate which paths should be excluded.
  ///
  /// Accepts glob patterns that use the `*` and `**` wildcard characters to match more than one path name.
  /// For more information, see the
  /// [Workflow syntax for GitHub Actions](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#filter-pattern-cheat-sheet).
  `paths-ignore`: Listing<String>(paths == null)?
}

class RegistryPackage extends Trigger {
  types: Listing<ReleaseType>?
}
typealias RegistryPackageType =
  "published"
  |"updated"

class Release extends Trigger {
  types: Listing<ReleaseType>?
}
typealias ReleaseType =
  "published"
  |"unpublished"
  |"created"
  |"edited"
  |"deleted"
  |"prereleased"
  |"released"

class RepositoryDispatch extends Trigger {
  types: Listing<String>?
}

class Schedule {
  @SourceCode { language = "Cron" }
  cron: String
}

typealias ScheduleCron = String

/// Allows workflows to be reused by other workflows.
///
/// https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#workflow_call
class WorkflowCall extends Trigger {
  inputs: Mapping<String, WorkflowInput>?
  outputs: Mapping<String, WorkflowCallOutput>?
  secrets: Listing<WorkflowCallSecrets>?
}

class WorkflowCallOutput {
  description: String?
  value: Any
}
class WorkflowCallSecrets {
  description: String?
  required: Boolean
}

class WorkflowDispatch extends Trigger {
  inputs: Mapping<String, WorkflowInput>?
}

class WorkflowInput {
  description: String
  deprecatedMessage: String?
  required: Boolean?
  default: String?
  type: WorkflowInputType?
  options: Listing<String>?
}
typealias WorkflowInputType = "boolean"|"string"|"choice"|"environment"|"number"

class WorkflowRun extends Trigger {
  types: Listing<WorkflowRunType>?
  workflows: Listing<String>(length > 0)
  branches: Listing<String>?
  `branches-ignore`: Listing<String>?
}
typealias WorkflowRunType =
  "requested"
  |"completed"
  |"in_progress"

class On {
  /// Runs your workflow anytime the `branch_protection_rule` event occurs.
  ///
  /// More than one activity type triggers this event.
  ///
  /// See <https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#branch_protection_rule>
  branch_protection_rule: BranchProtectionRule?

  /// Runs your workflow anytime the check_run event occurs.
  ///
  /// More than one activity type triggers this event.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#check_run>
  check_run: CheckRun?

  /// Runs your workflow anytime the `check_suite` event occurs.
  ///
  /// More than one activity type triggers this event.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#check_suite>
  check_suite: CheckSuite?

  /// Runs your workflow anytime someone creates a branch or tag, which triggers the create event.
  ///
  /// For information about the REST API, see <https://developer.github.com/v3/git/refs/#create-a-reference>.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#create>
  create: BaseTrigger?

  /// Runs your workflow when someone deletes a Git reference (Git branch or tag) in the workflow's repository.
  ///
  /// For information about the APIs to delete a Git reference, see [Mutations](https://docs.github.com/en/graphql/reference/mutations#deleteref) in the GraphQL API documentation or
  /// [REST API endpoints for Git references](https://docs.github.com/en/rest/git/refs#delete-a-reference).
  ///
  /// See <https://docs.github.com/en/actions/reference/workflows-and-actions/events-that-trigger-workflows#delete>
  `delete`: BaseTrigger?

  /// Runs your workflow anytime someone creates a deployment, which triggers the deployment event.
  ///
  /// Deployments created with a commit SHA may not have a Git ref.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#deployment>
  deployment: BaseTrigger?

  /// Runs your workflow anytime a third party provides a deployment status, which triggers the `deployment_status` event.
  ///
  /// Deployments created with a commit SHA may not have a Git ref.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#deployment_status>
  deployment_status: BaseTrigger?

  /// Runs your workflow anytime the discussion event occurs.
  ///
  /// More than one activity type triggers this event.
  ///
  /// See <https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#discussion>
  discussion: Discussion?

  /// Runs your workflow anytime the discussion_comment event occurs.
  ///
  /// More than one activity type triggers this event.
  ///
  /// See <https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#discussion_comment>
  discussion_comment: DiscussionComment?

  /// Runs your workflow anytime when someone forks a repository, which triggers the `fork` event.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#fork>
  fork: BaseTrigger?

  /// Runs your workflow when someone creates or updates a Wiki page, which triggers the `gollum` event.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#gollum>
  gollum: BaseTrigger?

  /// Runs your workflow anytime the `issue_comment` event occurs.
  ///
  /// More than one activity type triggers this event.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#issue_comment>
  issue_comment: IssueComment?

  /// Runs your workflow anytime the `issues` event occurs.
  ///
  /// More than one activity type triggers this event.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#issues>
  issues: Issues?

  /// Runs your workflow anytime the `label` event occurs.
  ///
  /// More than one activity type triggers this event.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#label>
  label: Label?

  /// Runs your workflow when a pull request is added to a merge queue, which adds the pull request to a merge group.
  ///
  /// For information about the merge queue, see <https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request-with-a-merge-queue>.
  ///
  /// See <https://help.github.com/en/github/automating-your-workflow-with-github-actions/events-that-trigger-workflows#merge_group>
  merge_group: MergeGroup?

  /// Runs your workflow anytime the `milestone` event occurs.
  ///
  /// More than one activity type triggers this event.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#milestone>
  milestone: Milestone?

  /// Runs your workflow anytime someone pushes to a GitHub Pages-enabled branch, which triggers the `page_build` event.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#page_build>
  page_build: BaseTrigger?

  /// Runs your workflow anytime the project event occurs.
  ///
  /// More than one activity type triggers this event.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#project>
  project: Project?

  /// Runs your workflow anytime the `project_card` event occurs.
  ///
  /// More than one activity type triggers this event.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#project_card>
  project_card: ProjectCard?

  /// Runs your workflow anytime the `project_column` event occurs.
  ///
  /// More than one activity type triggers this event.
  /// For information about the REST API, see <https://developer.github.com/v3/projects/columns>.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#project_column>
  project_column: ProjectColumn?

  /// Runs your workflow anytime someone makes a private repository public, which triggers the `public` event.
  ///
  /// For information about the REST API, see <https://developer.github.com/v3/repos/#edit>.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#public>
  public: BaseTrigger?

  /// Runs your workflow anytime the `pull_request` event occurs.
  ///
  /// More than one activity type triggers this event.
  /// For information about the REST API, see <https://developer.github.com/v3/pulls>.
  ///
  /// Note: Workflows do not run on private base repositories when you open a pull request from a forked repository.
  /// When you create a pull request from a forked repository to the base repository,
  /// GitHub sends the `pull_request` event to the base repository and no pull request events occur on the forked repository.
  /// Workflows don't run on forked repositories by default.
  /// You must enable GitHub Actions in the Actions tab of the forked repository.
  /// The permissions for the `GITHUB_TOKEN` in forked repositories is read-only.
  /// For more information about the `GITHUB_TOKEN`, see <https://help.github.com/en/articles/virtual-environments-for-github-actions>.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request>
  pull_request: PullRequest?

  /// Runs your workflow anytime the `pull_request_review` event occurs.
  ///
  /// More than one activity type triggers this event.
  ///
  /// Note: Workflows do not run on private base repositories when you open a pull request from a forked repository.
  /// When you create a pull request from a forked repository to the base repository,
  /// GitHub sends the pull_request event to the base repository and no pull request events occur on the forked repository.
  /// Workflows don't run on forked repositories by default.
  /// You must enable GitHub Actions in the Actions tab of the forked repository.
  /// The permissions for the GITHUB_TOKEN in forked repositories is read-only.
  /// For more information about the GITHUB_TOKEN, see https://help.github.com/en/articles/virtual-environments-for-github-actions.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_review>
  pull_request_review: PullRequestReview?

  /// Runs your workflow anytime a comment on a pull request's unified diff is modified, which triggers the
  /// `pull_request_review_comment` event.
  ///
  /// More than one activity type triggers this event.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_review_comment>
  pull_request_review_comment: PullRequestReviewComment?

  /// This event is similar to [pull_request], except that it runs in the context of the base repository of the pull
  /// request, rather than in the merge commit.
  ///
  /// This means that you can more safely make your secrets available to the workflows triggered by the pull request,
  /// because only workflows defined in the commit on the base repository are run.
  ///
  /// For example, this event allows you to create workflows that label and comment on pull requests, based on the
  /// contents of the event payload.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target>
  pull_request_target: PullRequest?

  /// Runs your workflow when someone pushes to a repository branch, which triggers the `push` event.
  ///
  /// Note: The webhook payload available to GitHub Actions does not include the added, removed, and modified attributes
  /// in the commit object.
  /// You can retrieve the full commit object using the REST API.
  /// For more information, see <https://developer.github.com/v3/repos/commits/#get-a-single-commit.>
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#push>
  push: Push?

  /// Runs your workflow anytime a package is published or updated.
  ///
  /// For more information, see <https://help.github.com/en/github/managing-packages-with-github-packages>.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#registry_package>
  registry_package: RegistryPackage?

  /// Runs your workflow anytime the release event occurs.
  ///
  /// More than one activity type triggers this event.
  /// For information about the REST API, see <https://developer.github.com/v3/repos/releases/> in the GitHub Developer documentation.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release>
  release: Release?

  /// You can use the GitHub API to trigger a webhook event called `repository_dispatch` when you want to trigger a
  /// workflow for activity that happens outside of GitHub.
  ///
  /// For more information, see <https://developer.github.com/v3/repos/#create-a-repository-dispatch-event>.
  /// To trigger the custom `repository_dispatch` webhook event, you must send a POST request to a GitHub API endpoint
  /// and provide an `event_type` name to describe the activity type.
  /// To trigger a workflow run, you must also configure your workflow to use the `repository_dispatch` event.
  ///
  /// See <https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#repository_dispatch>
  repository_dispatch: RepositoryDispatch?

  /// You can schedule a workflow to run at specific UTC times using POSIX cron syntax
  /// (https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07).
  ///
  /// Scheduled workflows run on the latest commit on the default or base branch.
  /// The shortest interval you can run scheduled workflows is once every 5 minutes.
  /// Note: GitHub Actions does not support the non-standard syntax @yearly, @monthly, @weekly, @daily, @hourly,
  /// and @reboot.
  /// You can use crontab guru (<https://crontab.guru/>) to help generate your cron syntax and confirm what time it will
  /// run.
  /// To help you get started, there is also a list of crontab guru examples (<https://crontab.guru/examples.html>).
  ///
  /// See <https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#schedule>
  schedule: Listing<Schedule>?

  /// Runs your workflow anytime the status of a Git commit changes, which triggers the `status` event.
  ///
  /// For information about the REST API, see <https://developer.github.com/v3/repos/statuses/>.
  ///
  /// See <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#status>
  status: BaseTrigger?

  /// Runs your workflow anytime the `watch` event occurs.
  ///
  /// More than one activity type triggers this event.
  /// For information about the REST API, see <https://developer.github.com/v3/activity/starring/>
  ///
  /// See <https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#watch>
  watch: BaseTrigger?

  /// Allows workflows to be reused by other workflows.
  ///
  /// See <https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#workflow_call>
  workflow_call: WorkflowCall?

  /// You can now create workflows that are manually triggered with the new `workflow_dispatch` event.
  ///
  /// You will then see a 'Run workflow' button on the Actions tab, enabling you to easily trigger a run.
  ///
  /// See <https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#workflow_dispatch>
  workflow_dispatch: WorkflowDispatch?

  /// This event occurs when a workflow run is requested or completed, and allows you to execute a workflow based on the
  /// finished result of another workflow.
  ///
  /// For example, if your [pull_request] workflow generates build artifacts, you can create a new workflow that uses
  /// `workflow_run` to analyze the results and add a comment to the original pull request.
  ///
  /// See <https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#workflow_run>
  workflow_run: WorkflowRun?
}

// endregion

// Environment Variables
typealias EnvironmentVariables = Mapping<String, String|Boolean|Number>

// Permissions
class Permissions {
  /// Work with GitHub Actions.
  ///
  /// For example, `actions = "write"` permits an action to cancel a workflow run.
  ///
  /// For more information, see
  /// [Permissions required for GitHub Apps](https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-actions).
  actions: Permission?

  /// Work with artifact attestations.
  ///
  /// For example, `attestations = "write"` permits an action to generate an artifact attestation for a build.
  ///
  /// For more information, see
  /// [Using artifact attestations to establish provenance for builds](https://docs.github.com/en/actions/how-tos/secure-your-work/use-artifact-attestations/use-artifact-attestations).
  attestations: Permission?

  /// Work with check runs and check suites.
  ///
  /// For example, `checks = "write"` permits an action to create a check run.
  ///
  /// For more information, see
  /// [Permissions required for GitHub Apps](https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-actions).
  checks: Permission?

  /// Work with the contents of the repository.
  ///
  /// For example, contents: read permits an action to list the commits, and `contents = "write"` allows the action to
  /// create a release.
  ///
  /// For more information, see
  /// [Permissions required for GitHub Apps](https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-actions).
  contents: Permission?

  /// Work with deployments.
  ///
  /// For example, deployments: write permits an action to create a new deployment.
  ///
  /// For more information, see
  /// [Permissions required for GitHub Apps](https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-actions).
  deployments: Permission?

  /// Work with GitHub Discussions.
  ///
  /// For example, `discussions = "write"` permits an action to close or delete a discussion.
  ///
  /// For more information, see [Using the GraphQL API for Discussions](https://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions).
  discussions: Permission?

  /// Fetch an OpenID Connect (OIDC) token.
  ///
  /// This requires `id-token = "write"`.
  ///
  /// For more information, see [OpenID Connect](https://docs.github.com/en/actions/concepts/security/openid-connect#updating-your-actions-for-oidc).
  `id-token`: Permission?

  /// Work with issues.
  ///
  /// For example, issues: write permits an action to add a comment to an issue.
  ///
  /// For more information, see
  /// [Permissions required for GitHub Apps](https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-actions).
  issues: Permission?

  /// Generate AI inference responses with GitHub Models.
  ///
  /// For example, `models = "read"` permits an action to use the GitHub Models inference API.
  ///
  /// See [Prototyping with AI models](https://docs.github.com/en/github-models/use-github-models/prototyping-with-ai-models).
  models: Permission?

  /// Work with GitHub Packages.
  ///
  /// For example, `packages = "write"` permits an action to upload and publish packages on GitHub Packages.
  ///
  /// For more information, see
  /// [About permissions for GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/about-permissions-for-github-packages#about-scopes-and-permissions-for-package-registries).
  packages: Permission?

  /// Work with GitHub Pages.
  ///
  /// For example, `pages = "write"` permits an action to request a GitHub Pages build.
  ///
  /// For more information, see
  /// [Permissions required for GitHub Apps](https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-actions).
  pages: Permission?

  /// Work with pull requests.
  ///
  /// For example, `pull-requests = "write"` permits an action to add a label to a pull request.
  ///
  /// For more information, see
  /// [Permissions required for GitHub Apps](https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-actions).
  `pull-requests`: Permission?

  /// Work with GitHub code scanning alerts.
  ///
  /// For example, `security-events = "read"` permits an action to list the code scanning alerts for the repository, and
  /// `security-events = "write"` allows an action to update the status of a code scanning alert.
  ///
  /// For more information, see [Repository permissions for 'Code scanning alerts'](https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-code-scanning-alerts).
  ///
  /// Dependabot and secret scanning alerts cannot be read with this permission and require a GitHub App or a personal
  /// access token.
  /// For more information, see [Repository permissions for 'Dependabot alerts'](https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-dependabot-alerts)
  /// and [Repository permissions for 'Secret scanning alerts'](https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-secret-scanning-alerts)
  /// in "Permissions required for GitHub Apps."
  `security-events`: Permission?

  /// Work with commit statuses.
  ///
  /// For example, `statuses = "read"` permits an action to list the commit statuses for a given reference.
  ///
  /// For more information, see
  /// [Permissions required for GitHub Apps](https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-actions).
  statuses: Permission?
}

typealias Permission = "read"|"write"|"none"

// Concurrency
class Concurrency {
  group: String
  `cancel-in-progress`: Boolean
}

// Jobs
abstract class BaseJob {
  /// A name for the job, which is displayed in the GitHub UI
  name: String?

  /// A conditional to prevent a job from running unless a condition is met.
  ///
  /// You can use any supported context and expression to create a conditional.
  /// For more information on which contexts are supported in this key, see
  /// [Contexts reference](https://docs.github.com/en/actions/reference/workflows-and-actions/contexts#context-availability).
  @SourceCode { language = "GithubExpressionLanguage" }
  `if`: String?

  /// Identify any jobs that must complete successfully before this job will run.
  ///
  /// It can be a string or array of strings.
  /// If a job fails or is skipped, all jobs that need it are skipped unless the jobs use a conditional expression that
  /// causes the job to continue.
  /// If a run contains a series of jobs that need each other, a failure or skip applies to all jobs in the dependency
  /// chain from the point of failure or skip onwards. If you would like a job to run even if a job it is dependent on
  /// did not succeed, use the `always()` conditional expression in `jobs.<job_id>.if`.
  ///
  /// See: <https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#jobsjob_idneeds>
  needs: (String|*Listing<String>)?

  /// Ensure that only a single job or workflow using the same concurrency group will run at a time.
  ///
  /// A concurrency group can be any string or expression. Allowed expression contexts: `github`, `inputs`, `vars`,
  /// `needs`, `strategy`, and `matrix`.
  /// For more information about expressions, see
  /// [Evaluate expressions in workflows and actions](https://docs.github.com/en/actions/reference/workflows-and-actions/expressions).
  ///
  /// You can also specify concurrency at the workflow level.
  /// For more information, see [module.concurrency].
  ///
  /// This means that there can be at most one running and one pending job in a concurrency group at any time.
  /// When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the
  /// repository is in progress, the queued job or workflow will be pending.
  /// Any existing pending job or workflow in the same concurrency group, if it exists, will be canceled and the new
  /// queued job or workflow will take its place.
  ///
  /// To also cancel any currently running job or workflow in the same concurrency group, specify `cancel-in-progress = true`.
  /// To conditionally cancel currently running jobs or workflows in the same concurrency group, you can specify
  /// [cancel-in-progress] as an expression with any of the allowed expression contexts.
  ///
  /// Note:
  ///
  /// The concurrency group name is case insensitive. For example, `prod` and `Prod` will be treated as the same concurrency group.
  /// Ordering is not guaranteed for jobs or workflow runs using concurrency groups. Jobs or workflow runs in the same concurrency group are handled in an arbitrary order.
  ///
  /// Docs: <https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/run-job-variations>
  concurrency: Concurrency?

  /// Use `jobs.<job_id>.strategy` to use a matrix strategy for your jobs.
  ///
  /// A matrix strategy lets you use variables in a single job definition to automatically create multiple job runs that
  /// are based on the combinations of the variables.
  /// For example, you can use a matrix strategy to test your code in multiple versions of a language or on multiple
  /// operating systems.
  ///
  /// For more information, see
  /// [Running variations of jobs in a workflow](https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/run-job-variations).
  ///
  /// Docs: <https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#jobsjob_idstrategy>
  strategy: Strategy?

  /// For a specific job, you can use `jobs.<job_id>.permissions` to modify the default permissions granted to the
  /// `GITHUB_TOKEN`, adding or removing access as required, so that you only allow the minimum required access.
  /// For more information, see Use `GITHUB_TOKEN` for authentication in workflows.
  ///
  /// By specifying the permission within a job definition, you can configure a different set of permissions for the
  /// `GITHUB_TOKEN` for each job, if required.
  /// Alternatively, you can specify the permissions for all jobs in the workflow.
  /// For information on defining permissions at the workflow level, see [module.permissions].
  ///
  /// For each of the available permissions, shown in the table below, you can assign one of the access levels:
  /// read (if applicable), write, or none. write includes read. If you specify the access for any of these permissions,
  /// all of those that are not specified are set to none.
  ///
  /// Docs: <https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#jobsjob_idpermissions>
  permissions: (*Permissions|"read-all"|"write-all")?
}

class DefaultJob extends BaseJob {
  /// Use `jobs.<job_id>.runs-on` to define the type of machine to run the job on.
  ///
  /// The destination machine can be either a GitHub-hosted runner, larger runner, or a self-hosted runner.
  /// You can target runners based on the labels assigned to them, or their group membership, or a combination of these.
  ///
  /// You can provide runs-on as:
  ///
  /// * A single string
  /// * A single variable containing a string
  /// * An array of strings, variables containing strings, or a combination of both
  /// * A key-value pair using the group or labels keys
  /// * If you specify an array of strings or variables, your workflow will execute on any runner that matches all of the specified runs-on values.
  ///   For example, here the job will only run on a self-hosted runner that has the labels `linux`, `x64`, and `gpu`:
  ///
  ///   ```
  ///   `runs-on` { "self-hosted"; "linux"; "x64"; "gpu" }
  ///   ```
  ///
  ///   For more information, see [Choosing self-hosted runners](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#choosing-self-hosted-runners).
  ///
  /// * You can mix strings and variables in an array. For example:
  ///
  ///   ```
  ///   on:
  ///     workflow_dispatch:
  ///   inputs:
  ///     chosen-os:
  ///       required: true
  ///       type: choice
  ///       options:
  ///         - Ubuntu
  ///         - macOS
  ///
  ///   jobs:
  ///     test:
  ///   runs-on: [self-hosted, "${{ inputs.chosen-os }}"]
  ///   steps:
  ///     - run: echo Hello world!
  ///   ```
  ///
  /// If you would like to run your workflow on multiple machines, use [strategy].
  `runs-on`: *String|Machine|Listing<*String|Machine>

  /// The maximum number of minutes to run the step before killing the process.
  ///
  /// Fractional values are not supported.
  `timeout-minutes`: Int(isPositive)?

  /// Sets variables for steps to use in the runner environment.
  ///
  /// You can also set variables for the entire workflow or a job.
  /// For more information, see
  /// [env](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#env) and
  /// [jobs.<job_id>.env](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#jobsjob_idenv).
  ///
  /// When more than one environment variable is defined with the same name, GitHub uses the most specific variable. For example, an environment variable defined in a step will override job and workflow environment variables with the same name, while the step executes. An environment variable defined for a job will override a workflow variable with the same name, while the job executes.
  ///
  /// Public actions may specify expected variables in the README file. If you are setting a secret or sensitive value, such as a password or token, you must set secrets using the secrets context. For more information, see Contexts reference.
  env: EnvironmentVariables?

  /// Craetes a map of outputs for a job.
  ///
  /// Job outputs are available to all downstream jobs that depend on this job.
  /// For more information on defining job dependencies, see [needs].
  ///
  /// Outputs can be a maximum of 1 MB per job.
  /// The total of all outputs in a workflow run can be a maximum of 50 MB.
  /// Size is approximated based on UTF-16 encoding.
  ///
  /// Job outputs containing expressions are evaluated on the runner at the end of each job.
  /// Outputs containing secrets are redacted on the runner and not sent to GitHub Actions.
  ///
  /// If an output is skipped because it may contain a secret, you will see the following warning message:
  /// "Skip output {output.Key} since it may contain secret."
  /// For more information on how to handle secrets, please refer to the
  /// [Example: Masking and passing a secret between jobs or workflows](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-commands#example-masking-and-passing-a-secret-between-jobs-or-workflows).
  ///
  /// To use job outputs in a dependent job, you can use the needs context.
  /// For more information, see [Contexts reference](https://docs.github.com/en/actions/reference/workflows-and-actions/contexts#needs-context).
  outputs: Mapping<String, String>?

  /// A map of variables that are available to all steps in the job.
  ///
  /// You can set variables for the entire workflow or an individual step.
  /// For more information, see env and jobs.<job_id>.steps[*].env.
  ///
  /// When more than one environment variable is defined with the same name, GitHub uses the most specific variable.
  /// For example, an environment variable defined in a step will override job and workflow environment variables with
  /// the same name, while the step executes.
  /// An environment variable defined for a job will override a workflow variable with the same name, while the job executes.
  ///
  /// Docs: <https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#jobsjob_idenv>
  environment: (*Environment|String)?

  /// A job contains a sequence of tasks called steps.
  ///
  /// Steps can run commands, run setup tasks, or run an action in your repository, a public repository, or an action
  /// published in a Docker registry.
  /// Not all steps run actions, but all actions run as a step. Each step runs in its own process in the runner
  /// environment and has access to the workspace and filesystem.
  /// Because steps run in their own process, changes to environment variables are not preserved between steps.
  /// GitHub provides built-in steps to set up and complete a job.
  ///
  /// GitHub only displays the first 1,000 checks, however, you can run an unlimited number of steps as long as you are
  /// within the workflow usage limits.
  ///
  /// For more information, see Billing and usage for GitHub-hosted runners and Actions limits for self-hosted runner usage limits.
  steps: Listing<Step>
}

class ReusableJob extends BaseJob {
  uses: String(matches(Regex("(.+/)+(.+)\\.(ya?ml)(@.+)?")))?
  with: Mapping<String, String|Number|Boolean>?
  secrets: ("inherit"|*Mapping<String, String|Number|Boolean>)?
}

typealias Job = *DefaultJob|ReusableJob

// Machines, part of Jobs
abstract class Machine {
  name: String
}
class UbuntuLatest extends Machine {
  name = "ubuntu-latest"
}
class MacOsLatest extends Machine {
  name = "macos-latest"
}
class WindowsLatest extends Machine {
  name = "windows-latest"
}

// Strategy, part of Jobs
class Strategy {
  matrix: Mapping<String, Listing<String|*Dynamic>>
  `fail-fast`: Boolean?
  `max-parallel`: (Number|String)?
}

// Environment, part of Jobs
class Environment {
  name: String
  url: String?
}

// Step, part of Jobs
open class Step {
  /// A name for your step to display on GitHub.
  name: String?

  /// A unique identifier for the step.
  ///
  /// You can use the [id] to reference the step in contexts.
  ///
  /// For more information, see [Contexts reference](https://docs.github.com/en/actions/reference/workflows-and-actions/contexts).
  id: String?

  /// You can use the if conditional to prevent a step from running unless a condition is met.
  ///
  /// You can use any supported context and expression to create a conditional.
  /// For more information on which contexts are supported in this key, see Contexts reference.
  ///
  /// When you use expressions in an if conditional, you can, optionally, omit the `${{ }}` expression syntax because
  /// GitHub Actions automatically evaluates the if conditional as an expression.
  /// However, this exception does not apply everywhere.
  ///
  /// For more information, see Evaluate expressions in workflows and actions.
  @SourceCode { language = "GithubExpressionLanguage" }
  `if`: String?

  /// The maximum number of minutes to run the step before killing the process.
  ///
  /// Fractional values are not supported.
  /// timeout-minutes must be a positive integer.
  `timeout-minutes`: Int(isPositive)?

  /// Sets variables for steps to use in the runner environment.
  /// You can also set variables for the entire workflow or a job.
  /// For more information, see [module.env] and [BaseJob.env].
  ///
  /// When more than one environment variable is defined with the same name, GitHub uses the most specific variable.
  /// For example, an environment variable defined in a step will override job and workflow environment variables with
  /// the same name, while the step executes.
  /// An environment variable defined for a job will override a workflow variable with the same name, while the job executes.
  ///
  /// Public actions may specify expected variables in the README file.
  /// If you are setting a secret or sensitive value, such as a password or token, you must set secrets using the
  /// secrets context.
  /// For more information, see [Contexts reference](https://docs.github.com/en/actions/reference/workflows-and-actions/contexts).
  env: EnvironmentVariables?

  /// Using the working-directory keyword, you can specify the working directory of where to run the command.
  ///
  /// Alternatively, you can specify a default working directory for all run steps in a job, or for all run steps in the
  /// entire workflow.
  /// For more information, see `defaults.run.working-directory` and `jobs.<job_id>.defaults.run.working-directory`.
  ///
  /// You can also use a run step to run a script.
  /// For more information, see [Adding scripts to your workflow](https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/add-scripts).
  ///
  /// Docs: <https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#jobsjob_idstepsworking-directory>
  `working-directory`: String?

  /// You can override the default shell settings in the runner's operating system and the job's default using the shell keyword.
  ///
  /// You can use built-in shell keywords, or you can define a custom set of shell options.
  /// The shell command that is run internally executes a temporary file that contains the commands specified in the run keyword.
  ///
  /// Docs: <https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#jobsjob_idstepsshell>
  shell: Shell?

  /// Runs command-line programs that do not exceed 21,000 characters using the operating system's shell.
  ///
  /// If you do not provide a name, the step name will default to the text specified in the run command.
  ///
  /// Commands run using non-login shells by default.
  /// You can choose a different shell and customize the shell used to run commands.
  /// For more information, see [shell].
  ///
  /// Each `run` keyword represents a new process and shell in the runner environment.
  run: String(length < 21_000)?(exactlyOneSet(this, uses))

  /// Selects an action to run as part of a step in your job.
  /// An action is a reusable unit of code.
  /// You can use an action defined in the same repository as the workflow, a public repository, or in a published
  /// Docker container image.
  ///
  /// We strongly recommend that you include the version of the action you are using by specifying a Git ref, SHA, or
  /// Docker tag.
  /// If you don't specify a version, it could break your workflows or cause unexpected behavior when the action owner
  /// publishes an update.
  ///
  /// * Using the commit SHA of a released action version is the safest for stability and security.
  /// * If the action publishes major version tags, you should expect to receive critical fixes and security patches
  ///   while still retaining compatibility. Note that this behavior is at the discretion of the action's author.
  /// * Using the default branch of an action may be convenient, but if someone releases a new major version with a
  ///   breaking change, your workflow could break.
  ///
  /// Some actions require inputs that you must set using the with keyword. Review the action's README file to determine
  /// the inputs required.
  ///
  /// Actions are either JavaScript files or Docker containers.
  /// If the action you're using is a Docker container you must run the job in a Linux environment.
  /// For more details, see [runs-on].
  uses: String?

  /// A map of the input parameters defined by the action. Each input parameter is a key/value pair.
  /// Input parameters are set as environment variables. The variable is prefixed with `INPUT_` and converted to upper
  /// case.
  ///
  /// Input parameters defined for a Docker container must use args.
  /// For more information, see [`jobs.<job_id>.steps[*].with.args`](https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#jobsjob_idstepswithargs).
  with: Mapping<String, String|Number|Boolean>?
}

const function exactlyOneSet(a: Any, b: Any) =
  if (a != null) b == null
  else if (b != null) a == null
  else false

// Shell, part of Steps
typealias Shell = "pwsh"|"bash"|"sh"|"cmd"|"powershell"|"python"

// Jobs top-level typealias
typealias Jobs = Mapping<String(matches(Regex("[a-zA-Z_][a-zA-Z0-9_-]*"))), Job>(!isEmpty)

// Templating

name: String

local const onIsSet = (on: On) ->
  on.branch_protection_rule != null ||
    on.check_run != null ||
    on.check_suite != null ||
    on.create != null ||
    on.`delete` != null ||
    on.deployment != null ||
    on.deployment_status != null ||
    on.discussion != null ||
    on.discussion_comment != null ||
    on.fork != null ||
    on.gollum != null ||
    on.issue_comment != null ||
    on.issues != null ||
    on.label != null ||
    on.merge_group != null ||
    on.milestone != null ||
    on.page_build != null ||
    on.project != null ||
    on.project_card != null ||
    on.project_column != null ||
    on.public != null ||
    on.pull_request != null ||
    on.pull_request_review != null ||
    on.pull_request_review_comment != null ||
    on.pull_request_target != null ||
    on.push != null ||
    on.registry_package != null ||
    on.release != null ||
    on.repository_dispatch != null ||
    on.schedule != null ||
    on.status != null ||
    on.watch != null ||
    on.workflow_call != null ||
    on.workflow_dispatch != null ||
    on.workflow_run != null

on: On(onIsSet)

/// A map of variables that are available to the steps of all jobs in the workflow.
///
/// You can also set variables that are only available to the steps of a single job or to a single step.
/// For more information, see [DefaultJob.env] and [Step.env].
///
/// When more than one environment variable is defined with the same name, GitHub uses the most specific variable.
/// For example, an environment variable defined in a step will override job and workflow environment variables with the
/// same name, while the step executes.
/// An environment variable defined for a job will override a workflow variable with the same name, while the job
/// executes.
env: EnvironmentVariables?

/// Use concurrency to ensure that only a single job or workflow using the same concurrency group will run at a time.
///
/// A concurrency group can be any string or expression.
/// The expression can only use
/// [`github`](https://docs.github.com/en/actions/reference/workflows-and-actions/contexts#github-context),
/// [`inputs`](https://docs.github.com/en/actions/reference/workflows-and-actions/contexts#inputs-context) and
/// [`vars`](https://docs.github.com/en/actions/reference/workflows-and-actions/contexts#vars-context) contexts.
/// For more information about expressions, see
/// [Evaluate expressions in workflows and actions](https://docs.github.com/en/actions/reference/workflows-and-actions/expressions).
///
/// You can also specify concurrency at the job level. For more information, see [BaseJob.concurrency].
/// This means that there can be at most one running and one pending job in a concurrency group at any time. When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress, the queued job or workflow will be pending. Any existing pending job or workflow in the same concurrency group, if it exists, will be canceled and the new queued job or workflow will take its place.
///
/// To also cancel any currently running job or workflow in the same concurrency group, specify cancel-in-progress: true. To conditionally cancel currently running jobs or workflows in the same concurrency group, you can specify cancel-in-progress as an expression with any of the allowed expression contexts.
concurrency: Concurrency?

/// You can use permissions to modify the default permissions granted to the `GITHUB_TOKEN`, adding or removing access
/// as required, so that you only allow the minimum required access.
///
/// For more information, see
/// [Use GITHUB_TOKEN for authentication in workflows](https://docs.github.com/en/actions/tutorials/authenticate-with-github_token#permissions-for-the-github_token).
///
/// You can use permissions either as a top-level key, to apply to all jobs in the workflow, or within specific jobs.
/// When you add the permissions key within a specific job, all actions and run commands within that job that use the
/// `GITHUB_TOKEN` gain the access rights you specify.
/// For more information, see [BaseJob.permissions].
///
/// Owners of an organization can restrict write access for the `GITHUB_TOKEN` at the repository level.
/// For more information, see
/// [Disabling or limiting GitHub Actions for your organization](https://docs.github.com/en/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).
///
/// When a workflow is triggered by the `pull_request_target` event, the `GITHUB_TOKEN` is granted read/write repository
/// permission, even when it is triggered from a public fork.
/// For more information, see
/// [Events that trigger workflows](https://docs.github.com/en/actions/reference/workflows-and-actions/events-that-trigger-workflows#pull_request_target).
permissions: (*Permissions|"read-all"|"write-all")?

/// A workflow run is made up of one or more jobs, which run in parallel by default.
/// To run jobs sequentially, you can define dependencies on other jobs using the [needs][BaseJob.needs] keyword.
///
/// Each job runs in a runner environment specified by runs-on.
///
/// You can run an unlimited number of jobs as long as you are within the workflow usage limits.
/// For more information, see [Billing and usage](https://docs.github.com/en/actions/concepts/billing-and-usage) for
/// GitHub-hosted runners and [Actions limits](https://docs.github.com/en/actions/reference/limits) for self-hosted
/// runner usage limits.
///
/// If you need to find the unique identifier of a job running in a workflow run, you can use the GitHub API.
///
/// For more information, see
/// [REST API endpoints for GitHub Actions](https://docs.github.com/en/rest/actions?apiVersion=2022-11-28#workflow-jobs).
jobs: Jobs

// Output
output {
  text = "# Do not modify!\n# This file was generated from a template using https://github.com/StefMa/pkl-gha\n\n\(super.text)"
  renderer = new YamlRenderer {
    converters {
      ["runs-on"] = (runsOn: String|Machine|Listing<String|Machine>) ->
        if (runsOn is Listing<String|Machine>) convertMachinesToString(runsOn) else convertMachineToString(runsOn)
    }
  }
}

const local function convertMachinesToString(runsOn: Listing<String|Machine>): Listing<String> = runsOn
  .toList()
  .map((type) -> convertMachineToString(type))
  .toListing()
const local function convertMachineToString(machine: String|Machine): String =
  if (machine is Machine) machine.name else machine
